// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Personaltool.Data;

namespace Personaltool.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200803165831_RemoveIdentity")]
    partial class RemoveIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Personaltool.Models.CareerLevel", b =>
                {
                    b.Property<int>("CareerLevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("CareerLevelID");

                    b.ToTable("CareerLevels");
                });

            modelBuilder.Entity("Personaltool.Models.MemberStatus", b =>
                {
                    b.Property<int>("MemberStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MemberStatusID");

                    b.ToTable("MemberStatus");
                });

            modelBuilder.Entity("Personaltool.Models.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AdressCity")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AdressNr")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AdressStreet")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AdressZIP")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmailAssociaton")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EmailPrivate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MobilePrivate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("PersonID");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Personaltool.Models.PersonsCareerLevel", b =>
                {
                    b.Property<int>("PersonsCareerLevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Begin")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CareerLevelID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.HasKey("PersonsCareerLevelID");

                    b.HasIndex("CareerLevelID");

                    b.HasIndex("PersonID");

                    b.ToTable("PersonsCareerLevels");
                });

            modelBuilder.Entity("Personaltool.Models.PersonsMemberStatus", b =>
                {
                    b.Property<int>("PersonsMemberStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Begin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MemberStatusID")
                        .HasColumnType("int");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.HasKey("PersonsMemberStatusID");

                    b.HasIndex("MemberStatusID");

                    b.HasIndex("PersonID");

                    b.ToTable("PersonsMemberStatus");
                });

            modelBuilder.Entity("Personaltool.Models.PersonsPosition", b =>
                {
                    b.Property<int>("PersonPositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Begin")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<int>("PositionID")
                        .HasColumnType("int");

                    b.HasKey("PersonPositionID");

                    b.HasIndex("PersonID");

                    b.HasIndex("PositionID");

                    b.ToTable("PersonsPositions");
                });

            modelBuilder.Entity("Personaltool.Models.Position", b =>
                {
                    b.Property<int>("PositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("PositionID");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Personaltool.Models.PersonsCareerLevel", b =>
                {
                    b.HasOne("Personaltool.Models.CareerLevel", "CareerLevel")
                        .WithMany("PersonsCareerLevels")
                        .HasForeignKey("CareerLevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Personaltool.Models.Person", "Person")
                        .WithMany("PersonsCareerLevels")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Personaltool.Models.PersonsMemberStatus", b =>
                {
                    b.HasOne("Personaltool.Models.MemberStatus", "MemberStatus")
                        .WithMany("PersonsMemberStatus")
                        .HasForeignKey("MemberStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Personaltool.Models.Person", "Person")
                        .WithMany("PersonsMemberStatus")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Personaltool.Models.PersonsPosition", b =>
                {
                    b.HasOne("Personaltool.Models.Person", "Person")
                        .WithMany("PersonsPositions")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Personaltool.Models.Position", "Position")
                        .WithMany("PersonsPositions")
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
